///creates table and table paragraph stylesvar myDoc = app.activeDocument;//removes trailing whitespaceapp.findGrepPreferences = NothingEnum.nothing;app.changeGrepPreferences = NothingEnum.nothing;//search optionsapp.findChangeGrepOptions.includeFootnotes = false;app.findChangeGrepOptions.includeHiddenLayers = false;app.findChangeGrepOptions.includeLockedLayersForFind = false;app.findChangeGrepOptions.includeLockedStoriesForFind = false;app.findChangeGrepOptions.includeMasterPages = false;//finds the whitespace and changes it to nothingapp.findGrepPreferences.findWhat = "\\s+$";app.changeGrepPreferences.changeTo = "";myDoc.changeGrep();//erases the search from the find/change dialogapp.findGrepPreferences = NothingEnum.nothing;app.changeGrepPreferences = NothingEnum.nothing;app.findGrepPreferences.findWhat = "(\\s\\s)+";app.changeGrepPreferences.changeTo = "\\s";myDoc.changeGrep();//erases the search from the find/change dialogapp.findGrepPreferences = NothingEnum.nothing;app.changeGrepPreferences = NothingEnum.nothing;///var myLabel ='';   //end of style creation//searches for the tables parent...poor tables are lost.var myTables = myDoc.stories.everyItem().tables.everyItem().getElements(); for ( var i = 0; i < myTables.length; i++ ){    var container = myTables[i].parent;    if ( container.constructor.name == "TextFrame" ) {    var myTextFrame = container;    }else if ( container.constructor.name == "Story" ) {    var myTextFrame = container.textContainers[0];}//~ alert(myTextFrame.associatedXMLElement.xmlAttributes.item('outputclass').value);//creates styles//   var myTblStyles = myDoc.tableStyles;   var myParStyles = myDoc.paragraphStyles;   var myLabel = myTextFrame.label;   try{      var newTblStyle =  myTblStyles.add();   newTblStyle.name = myLabel;   }   catch(e){    newTblStyle.remove();          }   try{      var newParHStyle =  myParStyles.add();   var newParBStyle =  myParStyles.add();   var newParCStyle =  myParStyles.add();   newParBStyle.name = myLabel+'_table_body_text';   newParHStyle.name = myLabel+'_table_head';   newParCStyle.name = myLabel+'_table_container';   }   catch(e){    newParBStyle.remove();       newParHStyle.remove();    newParCStyle.remove();       }//end of style creation///applies the stylesmyTables[i].appliedTableStyle = myTextFrame.label;//~ try{//~ alert(myTables[i].parent.paragraph);//~ }//~ catch(e){}/////sets the widthvar myWidth = myTextFrame.visibleBounds[3] - myTextFrame.visibleBounds[1];var myInsetRight = myDoc.objectStyles.item(myLabel).textFramePreferences.insetSpacing[3];var myInsetLeft = myDoc.objectStyles.item(myLabel).textFramePreferences.insetSpacing[1];var myStroke = myDoc.objectStyles.item(myLabel).strokeWeight * 0.01388888889;myStroke = myStroke * 3;var myInset = myInsetRight + myInsetLeft + myStroke;//~ alert(myInset);myWidth = myWidth - myInset;myTables[i].width = myWidth;}///functionsfunction toArray(objects){var i = objects.length; var array = [];while(i--){array.push(objects[i]);}return array;}